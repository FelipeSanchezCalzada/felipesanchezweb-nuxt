{"generatedAt":1688766538383,"generateTime":116,"contents":[{"_path":"/blog/posts/keycloak-y-django","_dir":"posts","_draft":false,"_partial":false,"_locale":"","_empty":false,"title":"Integración De Keycloak Con Django REST Framework","description":"En el siguiente artículo veremos como integrar el servidor de identidades Keycloak junto con Django REST Framework (Autenticación basada en tokens JWT).","featuredImagePath":"/blog/img/configuracion-realm-keycloak/1.png","date":"2022-01-02T00:00:00.000Z","tags":["Django","Keycloak"],"published":true,"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"integración-de-keycloak-con-django-rest-framework"},"children":[{"type":"text","value":"Integración De Keycloak Con Django REST Framework"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"En el siguiente artículo veremos como integrar el servidor de identidades Keycloak junto con Django REST Framework (Autenticación basada en tokens JWT)."}]},{"type":"element","tag":"h3","props":{"id":"requisitos-previos"},"children":[{"type":"text","value":"Requisitos previos:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Saber crear proyectos Django y saber integrar Django REST en un proyecto Django."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Tener una instancia de Keycloack en ejecución y un Realm totalmente nuevo y recién creado."}]}]},{"type":"element","tag":"h3","props":{"id":"objetivos-del-artículo"},"children":[{"type":"text","value":"Objetivos del artículo:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Tener un proyecto Django REST Framework que permita la autenticación a través de Keycloack."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Utilización del modelo de usuarios original de Django"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Permisos basados en los roles que traen los tokens JWT"}]}]},{"type":"element","tag":"h2","props":{"id":"creación-del-proyecto-django-rest-framework"},"children":[{"type":"text","value":"Creación del proyecto Django REST Framework"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"En este articulo no voy explicar como se crea un proyecto. Simplemente crea uno con la configuracion básica (o la que tu proyecto necesite)"}]},{"type":"element","tag":"h2","props":{"id":"configuración-del-realm-de-keycloak"},"children":[{"type":"text","value":"Configuración del Realm de Keycloak"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Para configurar el Realm primero creamos un cliente especifico para el proyecto:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"img.png","src":"/blog/img/configuracion-realm-keycloak/1.png"},"children":[]},{"type":"element","tag":"img","props":{"alt":"img.png","src":"/blog/img/configuracion-realm-keycloak/2.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Una vez creado el cliente podemos hacer las configuraciones básicas necesarias. ¡No olvides guardar!:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"img.png","src":"/blog/img/configuracion-realm-keycloak/3.png"},"children":[]}]},{"type":"element","tag":"h2","props":{"id":"configurando-el-proyecto-django"},"children":[{"type":"text","value":"Configurando el proyecto Django"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Vamos a usar la biblioteca "},{"type":"element","tag":"a","props":{"href":"https://github.com/mozilla/mozilla-django-oidc","rel":["nofollow"]},"children":[{"type":"text","value":"mozilla-django-oidc"}]},{"type":"text","value":",\nque permite utilizar cualquier servidor que siga "},{"type":"element","tag":"a","props":{"href":"https://openid.net/connect/","rel":["nofollow"]},"children":[{"type":"text","value":"OpenID Connect"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Primero instalamos mozilla-django-oidc y pyjwt:"}]},{"type":"element","tag":"code","props":{"className":["language-Bash"],"code":"pip install mozilla-django-oidc\npip install pyjwt\n","language":"Bash","meta":""},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"pip install mozilla-django-oidc\npip install pyjwt\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Después vamos a pasar a especificar las configuraciones necesarias en el archivo settings.py de Django:"}]},{"type":"element","tag":"code","props":{"className":["language-Python"],"code":"########################################################################################################################\n# Configuraciones para Modilla OIDC\n########################################################################################################################\n\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'Django_Keycloack_Tutorial.core.oidc.KeycloakOIDCAuthenticationBackend',\n)\n\n##########################################################################\n# Django REST\n##########################################################################\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'mozilla_django_oidc.contrib.drf.OIDCAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n        # other authentication classes, if needed\n    ],\n}\n##########################################################################\n\n\n##########################################################################\n# mozilla-django-oidc with Keycloak\n##########################################################################\nOIDC_RP_CLIENT_ID = 'django-back'\nOIDC_RP_CLIENT_SECRET = 'PyMQxJBMIgHEUjaBFAv0W88ZEihHMiNj'\n\nOIDC_OP_TOKEN_ENDPOINT = 'http://localhost:8005/auth/realms/Django_PoC/protocol/openid-connect/token'\nOIDC_OP_USER_ENDPOINT = 'http://localhost:8005/auth/realms/Django_PoC/protocol/openid-connect/userinfo'\nOIDC_OP_AUTHORIZATION_ENDPOINT  = 'http://localhost:8005/auth/realms/Django_PoC/protocol/openid-connect/auth'\n\nLOGIN_REDIRECT_URL = 'http://127.0.0.1:8000/api/'\n\n# This data is in url: http://localhost:8005/auth/realms/Django_PoC/.well-known/openid-configuration\nOIDC_RP_SIGN_ALGO = 'RS256'\nOIDC_OP_JWKS_ENDPOINT = 'http://localhost:8005/auth/realms/Django_PoC/protocol/openid-connect/certs'\n\n########################################################################################################################\n","language":"Python","meta":""},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"########################################################################################################################\n# Configuraciones para Modilla OIDC\n########################################################################################################################\n\nAUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'Django_Keycloack_Tutorial.core.oidc.KeycloakOIDCAuthenticationBackend',\n)\n\n##########################################################################\n# Django REST\n##########################################################################\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'mozilla_django_oidc.contrib.drf.OIDCAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n        # other authentication classes, if needed\n    ],\n}\n##########################################################################\n\n\n##########################################################################\n# mozilla-django-oidc with Keycloak\n##########################################################################\nOIDC_RP_CLIENT_ID = 'django-back'\nOIDC_RP_CLIENT_SECRET = 'PyMQxJBMIgHEUjaBFAv0W88ZEihHMiNj'\n\nOIDC_OP_TOKEN_ENDPOINT = 'http://localhost:8005/auth/realms/Django_PoC/protocol/openid-connect/token'\nOIDC_OP_USER_ENDPOINT = 'http://localhost:8005/auth/realms/Django_PoC/protocol/openid-connect/userinfo'\nOIDC_OP_AUTHORIZATION_ENDPOINT  = 'http://localhost:8005/auth/realms/Django_PoC/protocol/openid-connect/auth'\n\nLOGIN_REDIRECT_URL = 'http://127.0.0.1:8000/api/'\n\n# This data is in url: http://localhost:8005/auth/realms/Django_PoC/.well-known/openid-configuration\nOIDC_RP_SIGN_ALGO = 'RS256'\nOIDC_OP_JWKS_ENDPOINT = 'http://localhost:8005/auth/realms/Django_PoC/protocol/openid-connect/certs'\n\n########################################################################################################################\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Aquí los puntos importantes son las configuraciones de la seccion "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"mozilla-django-oidc with Keycloa"}]},{"type":"text","value":".\nla configuración OIDC_RP_CLIENT_SECRET se puede obtener desde Keycloack:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"img.png","src":"/blog/img/configuracion-realm-keycloak/4.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"El resto de configuraciones puede obtenerse en la URL "},{"type":"element","tag":"a","props":{"href":"http://localhost:8005/auth/realms/Django_Keycloak_Tutotial/.well-known/openid-configuration","rel":["nofollow"]},"children":[{"type":"text","value":"http://localhost:8005/auth/realms/Django_Keycloak_Tutotial/.well-known/openid-configuration"}]},{"type":"text","value":"\nHay que cambiar la URL con los datos de tu Realm, host y puerto:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"http://<HOST>:<PORT>/auth/realms/"},{"type":"element","tag":"realm","props":{},"children":[{"type":"text","value":"/.well-known/openid-configuration"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Ahora tenemos que crear un OIDCAuthenticationBackend customizado. Puedes modificarlo de acuerdo a tus necesidades.\nEsta clase es la encargada de crear o modificar los usuarios del modelo original de Django. No recomiendo modificar el modelo original, si queremos añadir mas datos es mejor hacer una relación 1 a 1 con un «perfil de usuario»."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"En ese mismo archivo podemos crear el BasePermission que nos permitirá autenticacion por roles. Tambien puedes customizarlo de acuerdo con las necesidades."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Este archivo puede estar en cualquier parte."}]},{"type":"element","tag":"code","props":{"className":["language-Python"],"code":"from mozilla_django_oidc.auth import OIDCAuthenticationBackend\nimport jwt\nfrom django.conf import settings\nfrom rest_framework.permissions import BasePermission\n\nclass KeycloakOIDCAuthenticationBackend(OIDCAuthenticationBackend):\n\n    def create_user(self, claims):\n        \"\"\" Overrides Authentication Backend so that Django users are\n            created with the keycloak preferred_username.\n            If nothing found matching the email, then try the username.\n        \"\"\"\n        user = super(KeycloakOIDCAuthenticationBackend, self).create_user(claims)\n        user.first_name = claims.get('given_name', '')\n        user.last_name = claims.get('family_name', '')\n        user.email = claims.get('email')\n        user.username = claims.get('preferred_username')\n        user.save()\n        return user\n\n    def filter_users_by_claims(self, claims):\n        \"\"\" Return all users matching the specified email.\n            If nothing found matching the email, then try the username\n        \"\"\"\n        email = claims.get('email')\n        preferred_username = claims.get('preferred_username')\n\n        if not email:\n            return self.UserModel.objects.none()\n        users = self.UserModel.objects.filter(email__iexact=email)\n\n        if len(users) < 1:\n            if not preferred_username:\n                return self.UserModel.objects.none()\n            users = self.UserModel.objects.filter(username__iexact=preferred_username)\n        return users\n\n    def update_user(self, user, claims):\n        user.first_name = claims.get('given_name', '')\n        user.last_name = claims.get('family_name', '')\n        user.email = claims.get('email')\n        user.username = claims.get('preferred_username')\n        user.save()\n        return user\n\n\n\nclass HasRole(BasePermission):\n\n    def __init__(self, roles: list = []):\n        self.roles = roles\n\n    def has_permission(self, request, view):\n        jwt_payload = jwt.decode(request.auth, options={\"verify_signature\": False})\n        realm_roles = jwt_payload['realm_access']['roles']\n        client_roles = jwt_payload['resource_access'].get(settings.OIDC_RP_CLIENT_ID, {}).get('roles', [])\n        all_roles = list(dict.fromkeys(realm_roles + client_roles))\n\n        return any(role in self.roles for role in all_roles)\n\n\nclass ROLES:\n    EMPLOYEE = 'EMPLOYEE'\n","language":"Python","meta":""},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"from mozilla_django_oidc.auth import OIDCAuthenticationBackend\nimport jwt\nfrom django.conf import settings\nfrom rest_framework.permissions import BasePermission\n\nclass KeycloakOIDCAuthenticationBackend(OIDCAuthenticationBackend):\n\n    def create_user(self, claims):\n        \"\"\" Overrides Authentication Backend so that Django users are\n            created with the keycloak preferred_username.\n            If nothing found matching the email, then try the username.\n        \"\"\"\n        user = super(KeycloakOIDCAuthenticationBackend, self).create_user(claims)\n        user.first_name = claims.get('given_name', '')\n        user.last_name = claims.get('family_name', '')\n        user.email = claims.get('email')\n        user.username = claims.get('preferred_username')\n        user.save()\n        return user\n\n    def filter_users_by_claims(self, claims):\n        \"\"\" Return all users matching the specified email.\n            If nothing found matching the email, then try the username\n        \"\"\"\n        email = claims.get('email')\n        preferred_username = claims.get('preferred_username')\n\n        if not email:\n            return self.UserModel.objects.none()\n        users = self.UserModel.objects.filter(email__iexact=email)\n\n        if len(users) < 1:\n            if not preferred_username:\n                return self.UserModel.objects.none()\n            users = self.UserModel.objects.filter(username__iexact=preferred_username)\n        return users\n\n    def update_user(self, user, claims):\n        user.first_name = claims.get('given_name', '')\n        user.last_name = claims.get('family_name', '')\n        user.email = claims.get('email')\n        user.username = claims.get('preferred_username')\n        user.save()\n        return user\n\n\n\nclass HasRole(BasePermission):\n\n    def __init__(self, roles: list = []):\n        self.roles = roles\n\n    def has_permission(self, request, view):\n        jwt_payload = jwt.decode(request.auth, options={\"verify_signature\": False})\n        realm_roles = jwt_payload['realm_access']['roles']\n        client_roles = jwt_payload['resource_access'].get(settings.OIDC_RP_CLIENT_ID, {}).get('roles', [])\n        all_roles = list(dict.fromkeys(realm_roles + client_roles))\n\n        return any(role in self.roles for role in all_roles)\n\n\nclass ROLES:\n    EMPLOYEE = 'EMPLOYEE'\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Hay que meter esa configuración en AUTHENTICATION_BACKENDS"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Para usar la autenticación por roles definida solo se puede hacer mediante la instanciación completa por constructor. A continuacion un ejemplo:"}]},{"type":"element","tag":"code","props":{"className":["language-Python"],"code":"class UserViewSet(viewsets.ModelViewSet):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n    def get_permissions(self):\n        return [IsAuthenticated(), HasRole([ROLES.EMPLOYEE])]\n","language":"Python","meta":""},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"class UserViewSet(viewsets.ModelViewSet):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n    def get_permissions(self):\n        return [IsAuthenticated(), HasRole([ROLES.EMPLOYEE])]\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Por ultimo solo queda añadir las URLs de mozilla oidc a los urlpatterns (solo si los necesitamos):"}]},{"type":"element","tag":"code","props":{"className":["language-Python"],"code":"path('oidc/', include('mozilla_django_oidc.urls')),\n","language":"Python","meta":""},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"path('oidc/', include('mozilla_django_oidc.urls')),\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Eso es todo, ya podemos usar una autenticacion por token JWT."}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"requisitos-previos","depth":3,"text":"Requisitos previos:"},{"id":"objetivos-del-artículo","depth":3,"text":"Objetivos del artículo:"},{"id":"creación-del-proyecto-django-rest-framework","depth":2,"text":"Creación del proyecto Django REST Framework"},{"id":"configuración-del-realm-de-keycloak","depth":2,"text":"Configuración del Realm de Keycloak"},{"id":"configurando-el-proyecto-django","depth":2,"text":"Configurando el proyecto Django"}]}},"_type":"markdown","_id":"content:blog:posts:keycloak-y-django.md","_source":"content","_file":"blog/posts/keycloak-y-django.md","_extension":"md"}],"navigation":[{"title":"Blog","_path":"/blog","children":[{"title":"Posts","_path":"/blog/posts","children":[{"title":"Integración De Keycloak Con Django REST Framework","_path":"/blog/posts/keycloak-y-django"}]}]}]}